(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{532:function(t,s,a){"use strict";a.r(s);var n=a(8),_=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"网络相关知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络相关知识点"}},[t._v("#")]),t._v(" 网络相关知识点")]),t._v(" "),a("h2",{attrs:{id:"_1-http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http协议"}},[t._v("#")]),t._v(" 1.\tHTTP协议")]),t._v(" "),a("blockquote",[a("p",[t._v("HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传 输层协议，保证了数据传输的可靠性。")]),t._v(" "),a("p",[t._v("HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。")]),t._v(" "),a("p",[t._v("HTTP 有两种连接模式，一种是持续连接，一种非持续连接。非持续连接指的是服务器必须为每一个请求的对象建立和维护 一个全新的连接。持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。在 HTTP1.0 以前使用的非持续的连接，但是可以在请求时，加上 Connection: keep-alive 来要求服务器不要关闭 TCP 连接。HTTP1.1 以后默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持 同时建立 6 个持久连接。")])]),t._v(" "),a("h2",{attrs:{id:"_2-常见状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-常见状态码"}},[t._v("#")]),t._v(" 2.常见状态码")]),t._v(" "),a("blockquote",[a("p",[t._v("1XX 代表服务器接收到请求、2XX 代表成功、3XX 代表重定向、4XX 代表客户端错误、5XX 代表服务器端错误。")])]),t._v(" "),a("ul",[a("li",[t._v("200-请求成功、")]),t._v(" "),a("li",[t._v("202-服务器端已经收到请求消息，但是尚未进行处理")]),t._v(" "),a("li",[t._v("301-永久移动、")]),t._v(" "),a("li",[t._v("302-临时移动、")]),t._v(" "),a("li",[t._v("304-所请求的资源未修改、")]),t._v(" "),a("li",[t._v("400-客户端请求的语法错误、")]),t._v(" "),a("li",[t._v("404-请求的资源不存在")]),t._v(" "),a("li",[t._v("500-服务器内部错误")])]),t._v(" "),a("h2",{attrs:{id:"_3-http-1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-http-1-1"}},[t._v("#")]),t._v(" 3.HTTP/1.1")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("优点")]),t._v("：支持长连接和请求的流水线，在一个TCP连接上可以传送多个HTTP请求，避免了因为多次建立TCP连接的时间消耗和延时")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("缺点")]),t._v("：同一个 TCP 连接里面，数据请求的通信次序 是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许 多请求排队等待的情况，这种情况被称为“队头堵塞”。队头阻塞会导致持久连接在达到最大数量时，剩余的资源需要等待其他 资源请求完成后才能发起请求。")])]),t._v(" "),a("p",[t._v("为了避免这个问题，一个是减少请求数，一个是同时打开多个持久连接。这就是我们对网站优化时，使用雪碧图、合并脚本的 原因。")]),t._v(" "),a("h2",{attrs:{id:"_4-http-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-2-0"}},[t._v("#")]),t._v(" 4.HTTP/2.0")]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("多路复用：")]),t._v(" 即多个请求都通过一个TCP连接并发地完成")]),t._v(" "),a("p",[a("strong",[t._v("服务端推送：")]),t._v(" 服务端能够主动把资源推送给客户端")]),t._v(" "),a("p",[a("strong",[t._v("新的二进制格式：")]),t._v(" HTTP/2采用二进制格式传输数据，相比于HTTP/1.1的文本格式，二进制格式具有更好的解析性和拓展性")]),t._v(" "),a("p",[a("strong",[t._v("header压缩：")]),t._v(" HTTP/2压缩消息头，减少了传输数据的大小")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("缺点")]),t._v("：与1.1相似，但是阻塞问题更大，因为只通过一个TCP连接。而1.1最多可用6个。这是使用TCP协议的底层局限性")])]),t._v(" "),a("h2",{attrs:{id:"_5-http-3-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-http-3-0"}},[t._v("#")]),t._v(" 5.HTTP/3.0")]),t._v(" "),a("blockquote",[a("p",[t._v("由于使用TCP的局限性，3.0使用了UDP协议，在UDP的基础上实现多路复用、0-RTT、TLS加密、流量控制、丢包重传等功能。")])]),t._v(" "),a("h2",{attrs:{id:"_6-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-https"}},[t._v("#")]),t._v(" 6.HTTPS")]),t._v(" "),a("blockquote",[a("p",[t._v("超文本传输安全协议")]),t._v(" "),a("p",[t._v("S为数据加密协议")])]),t._v(" "),a("ul",[a("li",[t._v("HTTPS使用443端口，而HTTP使用80")]),t._v(" "),a("li",[t._v("HTTPS需要申请证书")]),t._v(" "),a("li",[t._v("HTTP是超文本传输协议，是明文传输；HTTPS是经过SSL加密的协议，传输更安全")]),t._v(" "),a("li",[t._v("HTTPS比HTTP慢，因为HTTPS除了TCP握手的三个包，还要加上SSL握手的九个包")])]),t._v(" "),a("h1",{attrs:{id:"_7-http的请求方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-http的请求方式"}},[t._v("#")]),t._v(" 7.HTTP的请求方式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("get 从服务器获取")])]),t._v(" "),a("li",[a("p",[t._v("post 向服务器发送")])]),t._v(" "),a("li",[a("p",[t._v("put 增加")])]),t._v(" "),a("li",[a("p",[t._v("delete 删除")])]),t._v(" "),a("li",[a("p",[t._v("head、options、trace、connection、track…")])])]),t._v(" "),a("h2",{attrs:{id:"_8-ajax-的过程是怎么样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-ajax-的过程是怎么样的"}},[t._v("#")]),t._v(" 8.AJAX 的过程是怎么样的")]),t._v(" "),a("ul",[a("li",[t._v("(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.")]),t._v(" "),a("li",[t._v("(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.")]),t._v(" "),a("li",[t._v("(3)设置响应HTTP请求状态变化的函数.")]),t._v(" "),a("li",[t._v("(4)发送HTTP请求.")]),t._v(" "),a("li",[t._v("(5)获取异步调用返回的数据.")]),t._v(" "),a("li",[t._v("(6)使用JavaScript和DOM实现局部刷新.")])]),t._v(" "),a("p",[t._v("一个简单的ajax请求")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test.txt?_="')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("random")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"get"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("dataType")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"json"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//->text获取的是一个字符串 json获取的是一个对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("success")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//->解析数据和实现数据绑定都可以继续在这个方法中去操作了")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("h2",{attrs:{id:"_9-get和post的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-get和post的区别"}},[t._v("#")]),t._v(" 9.get和post的区别")]),t._v(" "),a("ul",[a("li",[t._v("（1）从应用场景上来说，GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景。比如注册用户这一类的操作。")]),t._v(" "),a("li",[t._v("（2）因为不同的应用场景，所以浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。")]),t._v(" "),a("li",[t._v("（3）从发送的报文格式来说，Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。")]),t._v(" "),a("li",[t._v("（4）但是 Get 请求也可以将请求的参数放入 url 中向服务器发送，\n"),a("ul",[a("li",[t._v("这样的做法相对于 Post 请求来说，一个方面是不太安全，因为请求的 url 会被保留在历史记录中。并且浏览器由于对 url 有一个长度上的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。还有就是 post 的参数传递支持更多的数据类型。")])])])]),t._v(" "),a("h2",{attrs:{id:"_10-正向代理和反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-正向代理和反向代理"}},[t._v("#")]),t._v(" 10.正向代理和反向代理")]),t._v(" "),a("blockquote",[a("p",[t._v("我们常说的代理也就是指正向代理，正向代理的过程，"),a("strong",[t._v("它隐藏了真实的请求客户端")]),t._v("，服务端不知道真实的客户端是谁，客户端请求的 服务都被代理服务器代替来请求。")]),t._v(" "),a("p",[t._v("反向代理"),a("strong",[t._v("隐藏了真实的服务端")]),t._v("，当我们请求一个网站的时候，背后可能有成千上万台服务器为我们服务，但具体是哪一台，我们不知 道，也不需要知道，我们只需要知道反向代理服务器是谁就好了，反向代理服务器会帮我们把请求转发到真实的服务器那里去。反向 代理器一般用来实现负载平衡。")])])])}),[],!1,null,null,null);s.default=_.exports}}]);